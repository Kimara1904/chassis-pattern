version: '3.4'

services:
  apigateway:
    image: kimara19/chassis-apigateway:latest
    build:
      context: .
      dockerfile: ApiGateway/Dockerfile
    ports:
      - '8080:80'
      - '44340:443'
    depends_on:
        - userservice
        - bookservice
        - reviewservice
        - emailmessageservice
    environment:
        - CONTAINER_ENV=docker

  userservice:
    image: kimara19/chassis-userservice:latest
    build:
      context: .
      dockerfile: UserService/Dockerfile

    ports:
      - '8081:80'

    depends_on:
      userdb:
        condition: service_healthy

    environment:
      - DB_HOST=userdb
      - DB_NAME=LibraryUserDB
      - DB_SA_PASSWORD=ChassisLibrary123!

  userdb:
    image: 'mcr.microsoft.com/mssql/server:2022-latest'

    container_name: userdb

    ports:
      - '1433:1433'
    
    environment:
      - SA_PASSWORD=ChassisLibrary123!
      - ACCEPT_EULA=Y

    healthcheck:
      test: /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P "ChassisLibrary123!" -Q "SELECT 1" || exit 1
      interval: 10s
      timeout: 3s
      retries: 10
      start_period: 10s

  bookservice:
    image: kimara19/chassis-bookservice:latest
    build:
      context: .
      dockerfile: BookService/Dockerfile
    ports:
      - '8082:80'

    depends_on:
      bookdb:
        condition: service_healthy

    environment:
      - DB_HOST=bookdb
      - DB_NAME=LibraryBookDB
      - DB_SA_PASSWORD=ChassisLibrary123!

  bookdb:
    image: 'mcr.microsoft.com/mssql/server:2022-latest'

    container_name: bookdb

    ports:
      - '1434:1433'
    
    environment:
      - SA_PASSWORD=ChassisLibrary123!
      - ACCEPT_EULA=Y

    healthcheck:
      test: /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P "ChassisLibrary123!" -Q "SELECT 1" || exit 1
      interval: 10s
      timeout: 3s
      retries: 10
      start_period: 10s

  reviewservice:
    image: kimara19/chassis-reviewservice:latest
    build:
      context: .
      dockerfile: ReviewService/Dockerfile

    ports:
      - '8083:80'

    depends_on:
      reviewdb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

    environment:
      - DB_HOST=reviewdb
      - DB_NAME=LibraryReviewDB
      - DB_SA_PASSWORD=ChassisLibrary123!
      - RABBIT_MQ_SERVER=rabbitmq
      - RABBIT_MQ_USERNAME=guest
      - RABBIT_MQ_PASSWORD=guest
      - RABBITMQSETTINGS__EXCHANGENAME=MailExchange
      - RABBITMQSETTINGS__EXCHHANGETYPE=direct
      - RABBITMQSETTINGS__QUEUENAME=mail_queue
      - RABBITMQSETTINGS__ROUTEKEY=mail_route

  reviewdb:
    image: 'mcr.microsoft.com/mssql/server:2022-latest'

    container_name: reviewdb

    ports:
      - '1435:1433'
    
    environment:
      - SA_PASSWORD=ChassisLibrary123!
      - ACCEPT_EULA=Y

    healthcheck:
      test: /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P "ChassisLibrary123!" -Q "SELECT 1" || exit 1
      interval: 10s
      timeout: 3s
      retries: 10
      start_period: 10s

  emailmessageservice:
    image: kimara19/chassis-emailmessageservice:latest
    build:
      context: .
      dockerfile: EmailMessageService/Dockerfile

    ports:
      - '8084:80'

    depends_on:
      rabbitmq:
        condition: service_healthy

    environment:
      - RABBIT_MQ_SERVER=rabbitmq
      - RABBIT_MQ_USERNAME=guest
      - RABBIT_MQ_PASSWORD=guest
      - RABBITMQSETTINGS__EXCHANGENAME=MailExchange
      - RABBITMQSETTINGS__EXCHHANGETYPE=direct
      - RABBITMQSETTINGS__QUEUENAME=mail_queue
      - RABBITMQSETTINGS__ROUTEKEY=mail_route

  rabbitmq:
    image: "rabbitmq:3.8"
    container_name: rabbitmq
    ports:
      - "5672:5672"  
      - "15672:15672"  
    environment:
      RABBITMQ_DEFAULT_USER: "guest"  
      RABBITMQ_DEFAULT_PASS: "guest"  
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3

volumes:
  rabbitmq-data:

networks:
  default:
    driver: bridge
